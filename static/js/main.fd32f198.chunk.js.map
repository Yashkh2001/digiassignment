{"version":3,"sources":["actions/diagram.ts","components/AppButtons.tsx","components/MyDiagram.tsx","components/MyDiagramContainer.tsx","reducers/diagramReducer.ts","components/SelectionDetails.tsx","App.tsx","registerServiceWorker.ts","store.ts","index.tsx"],"names":["actionCreator","actionCreatorFactory","init","updateNodeColor","UpdateNodeText","addNode","removeNode","removeLink","nodeSelected","nodeDeselected","connect","state","Object","objectSpread","dispatch","nodeId","initHandler","nodeDataArray","key","label","color","linkDataArray","from","to","updateNodeColorHandler","addNodeHandler","_ref","react_default","a","createElement","className","type","onClick","MyDiagram","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","diagramRef","React","createRef","initDiagram","bind","assertThisInitialized","onTextEdited","gojsreact","ref","divClassName","onModelChange","skipsDiagramUpdate","_this2","$","go","GraphObject","make","myDiagram","Diagram","initialContentAlignment","Spot","LeftCenter","undoManager.isEnabled","animationManager.isInitial","layout","TreeLayout","angle","arrangement","ArrangementVertical","treeStyle","StyleLayered","isReadOnly","allowHorizontalScroll","allowVerticalScroll","allowZoom","allowSelect","autoScale","Uniform","contentAlignment","TextEdited","model","GraphLinksModel","linkKeyProperty","makeUniqueLinkKeyFunction","m","data","k","findLinkDataForKey","toolManager","panningTool","isEnabled","mouseWheelBehavior","ToolManager","WheelScroll","nodeTemplate","Node","selectionChanged","node","onNodeSelection","isSelected","Shape","strokeWidth","Binding","TextBlock","margin","editable","linkTemplate","Link","ofModel","toArrow","e","tb","subject","part","onTextChange","text","PureComponent","event","removedNodeKeys","forEach","removeLinkKeys","removedLinkKeys","Fragment","src_components_MyDiagram","colors","getRandomColor","Math","floor","random","length","diagramReducer","reducerWithInitialState","selectedNodeKeys","case","payload","updatedNodes","map","nodeIndex","findIndex","concat","toConsumableArray","slice","linksToAdd","parent","nodeToRemoveIndex","linkToRemoveIndex","link","Key","nodeIndexToRemove","build","nodeSelectionSelector","nodes","message","reduce","result","current","App","components_AppButtons","components_SelectionDetails","components_MyDiagramContainer","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","mainReducer","gojsKey","process","REACT_APP_GOJS_KEY","licenseKey","ReactDOM","render","es","store","createStore","applyMiddleware","apply","src_App_0","document","getElementById","URL","toString","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fd32f198.chunk.js","sourcesContent":["import { actionCreatorFactory } from 'typescript-fsa';\nimport { NodeModel } from '../reducers/diagramReducer';\nimport go from 'gojs';\n\nconst actionCreator = actionCreatorFactory('DIAGRAM');\n\nexport interface UpdateNodeTextEvent {\n    key: string;\n    text: string;\n}\n\nexport const init = actionCreator<{ nodeDataArray: Array<NodeModel>; linkDataArray: Array<go.ObjectData> }>('INIT');\nexport const updateNodeColor = actionCreator('UPDATE_NODE_COLOR');\nexport const UpdateNodeText = actionCreator<UpdateNodeTextEvent>('UPDATE_NODE_TEXT');\nexport const addNode = actionCreator<string>('ADD_NODE');\nexport const removeNode = actionCreator<go.Key>('REMOVE_NODE');\nexport const removeLink = actionCreator<go.Key>('REMOVE_LINK');\nexport const nodeSelected = actionCreator<string>('NODE_SELECTED');\nexport const nodeDeselected = actionCreator<string>('NODE_DESELECTED');\n","import React from 'react';\nimport { DiagramState, NodeModel } from '../reducers/diagramReducer';\nimport { connect } from 'react-redux';\nimport { init, updateNodeColor, addNode } from '../actions/diagram';\nimport { Action } from 'typescript-fsa';\nimport { Dispatch } from 'redux';\n\nexport interface AppButtonsDispatchProps {\n    initHandler: () => void;\n    updateNodeColorHandler: () => void;\n    addNodeHandler: () => void;\n}\n\nconst mapStateToProps = (state: DiagramState) => {\n    return {\n        ...state\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<\n        Action<{ nodeDataArray: Array<NodeModel>; linkDataArray: Array<go.ObjectData> }> | Action<void> | Action<string>\n    >\n): AppButtonsDispatchProps => {\n    let nodeId = 0;\n    return {\n        initHandler: () =>\n            dispatch(\n                init({\n                    nodeDataArray: [\n                        { key: 'Alpha', label: 'Alpha', color: 'lightblue' },\n                        { key: 'Beta', label: 'Beta', color: 'orange' },\n                        { key: 'Gamma', label: 'Gamma', color: 'lightgreen' },\n                        { key: 'Delta', label: 'Delta', color: 'pink' },\n                        { key: 'Omega', label: 'Omega', color: 'grey' }\n                    ],\n                    linkDataArray: [\n                        { key: -1, from: 'Alpha', to: 'Beta' },\n                        { key: -2, from: 'Alpha', to: 'Gamma' },\n                        { key: -3, from: 'Beta', to: 'Delta' },\n                        { key: -4, from: 'Gamma', to: 'Omega' }\n                    ]\n                })\n            ),\n        updateNodeColorHandler: () => dispatch(updateNodeColor()),\n        addNodeHandler: () => {\n            dispatch(addNode('node' + nodeId));\n            nodeId += 1;\n        }\n    };\n};\n\nconst AppButtons = ({ initHandler, updateNodeColorHandler, addNodeHandler }: AppButtonsDispatchProps) => {\n    return (\n        <div className=\"centered-container\">\n            <div className=\"inline-element\">\n                <button type=\"button\" onClick={() => initHandler()}>\n                    Init diagram\n                </button>\n            </div>\n            <div className=\"inline-element\">\n                <button type=\"button\" onClick={() => updateNodeColorHandler()}>\n                    Update node color\n                </button>\n            </div>\n            <div className=\"inline-element\">\n                <button type=\"button\" onClick={() => addNodeHandler()}>\n                    Add node with selected node(s) as parent(s)\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(AppButtons);\n","import React from 'react';\nimport go from 'gojs';\nimport { Diagram, ToolManager } from 'gojs';\nimport { NodeModel } from '../reducers/diagramReducer';\nimport { UpdateNodeTextEvent } from '../actions/diagram';\nimport { ReactDiagram } from 'gojs-react';\nimport './MyDiagram.css';\n\ninterface MyDiagramProps {\n    nodeDataArray: Array<NodeModel>;\n    linkDataArray: Array<go.ObjectData>;\n    onNodeSelection: (key: string, isSelected: boolean) => void;\n    onModelChange: (event: go.IncrementalData) => void;\n    onTextChange: (event: UpdateNodeTextEvent) => void;\n}\n\nclass MyDiagram extends React.PureComponent<MyDiagramProps> {\n    private diagramRef: React.RefObject<ReactDiagram>;\n\n    constructor(props: MyDiagramProps) {\n        super(props);\n        this.diagramRef = React.createRef();\n        this.initDiagram = this.initDiagram.bind(this);\n        this.onTextEdited = this.onTextEdited.bind(this);\n    }\n\n    render() {\n        return (\n            <ReactDiagram\n                ref={this.diagramRef}\n                divClassName=\"myDiagram\"\n                initDiagram={this.initDiagram}\n                nodeDataArray={this.props.nodeDataArray}\n                linkDataArray={this.props.linkDataArray}\n                onModelChange={this.props.onModelChange}\n                skipsDiagramUpdate={false}\n            />\n        );\n    }\n    private initDiagram(): Diagram {\n        const $ = go.GraphObject.make;\n\n        const myDiagram: Diagram = $(go.Diagram, {\n            initialContentAlignment: go.Spot.LeftCenter,\n            'undoManager.isEnabled': true,\n            'animationManager.isInitial': false,\n            layout: $(go.TreeLayout, {\n                angle: 0,\n                arrangement: go.TreeLayout.ArrangementVertical,\n                treeStyle: go.TreeLayout.StyleLayered\n            }),\n            isReadOnly: false,\n            allowHorizontalScroll: true,\n            allowVerticalScroll: true,\n            allowZoom: false,\n            allowSelect: true,\n            autoScale: Diagram.Uniform,\n            contentAlignment: go.Spot.LeftCenter,\n            TextEdited: this.onTextEdited,\n            model: $(go.GraphLinksModel, {\n                linkKeyProperty: 'key',\n                makeUniqueLinkKeyFunction: (m: go.GraphLinksModel, data) => {\n                    let k = data.key || -1;\n                    while (m.findLinkDataForKey(k)) {\n                        k--;\n                    }\n                    data.key = k;\n                    return k;\n                }\n            })\n        });\n\n        myDiagram.toolManager.panningTool.isEnabled = false;\n        myDiagram.toolManager.mouseWheelBehavior = ToolManager.WheelScroll;\n\n        myDiagram.nodeTemplate = $(\n            go.Node,\n            'Auto',\n            {\n                selectionChanged: node => this.props.onNodeSelection(node.key as string, node.isSelected)\n            },\n            $(go.Shape, 'Diamond', { strokeWidth: 0 }, new go.Binding('fill', 'color')),\n            $(go.TextBlock, { margin: 12, editable: true }, new go.Binding('text', 'label'))\n        );\n\n        myDiagram.linkTemplate = $(\n            go.Link,\n            new go.Binding('relinkableFrom', 'canRelink').ofModel(),\n            new go.Binding('relinkableTo', 'canRelink').ofModel(),\n            $(go.Shape),\n            $(go.Shape, { toArrow: 'Standard' })\n        );\n\n        return myDiagram;\n    }\n\n    private onTextEdited(e: go.DiagramEvent) {\n        const tb = e.subject;\n        if (tb === null) {\n            return;\n        }\n        const node = tb.part;\n        if (node instanceof go.Node && this.props.onTextChange) {\n            this.props.onTextChange({ key: node.key as string, text: tb.text });\n        }\n    }\n}\n\nexport default MyDiagram;\n","import React from 'react';\nimport MyDiagram from './MyDiagram';\nimport { DiagramState, NodeModel } from '../reducers/diagramReducer';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\nimport {\n    nodeSelected,\n    nodeDeselected,\n    removeNode,\n    removeLink,\n    UpdateNodeTextEvent,\n    UpdateNodeText\n} from '../actions/diagram';\nimport { Action } from 'typescript-fsa';\n\ninterface MyDiagramContainerStateProps {\n    nodeDataArray: Array<NodeModel>;\n    linkDataArray: Array<go.ObjectData>;\n}\n\ninterface MyDiagramContainerDispatchProps {\n    onNodeSelection: (key: string, isSelected: boolean) => void;\n    onModelChange: (event: go.IncrementalData) => void;\n    onTextChange: (event: UpdateNodeTextEvent) => void;\n}\n\nconst mapStateToProps = (state: DiagramState) => {\n    return {\n        nodeDataArray: state.nodeDataArray,\n        linkDataArray: state.linkDataArray\n    };\n};\n\nconst mapDispatchToProps = (\n    dispatch: Dispatch<Action<string> | Action<go.Key> | Action<UpdateNodeTextEvent>>\n): MyDiagramContainerDispatchProps => {\n    return {\n        onNodeSelection: (key: string, isSelected: boolean) => {\n            if (isSelected) {\n                dispatch(nodeSelected(key));\n            } else {\n                dispatch(nodeDeselected(key));\n            }\n        },\n        onModelChange: (event: go.IncrementalData) => {\n            const removedNodeKeys = event.removedNodeKeys;\n            if (removedNodeKeys) {\n                removedNodeKeys.forEach(key => {\n                    dispatch(removeNode(key));\n                });\n            }\n            const removeLinkKeys = event.removedLinkKeys;\n            if (removeLinkKeys) {\n                removeLinkKeys.forEach(key => dispatch(removeLink(key)));\n            }\n        },\n        onTextChange: (event: UpdateNodeTextEvent) => {\n            dispatch(UpdateNodeText(event));\n        }\n    };\n};\n\nconst MyDiagramContainer = ({\n    nodeDataArray,\n    linkDataArray,\n    onNodeSelection,\n    onModelChange,\n    onTextChange\n}: MyDiagramContainerStateProps & MyDiagramContainerDispatchProps) => {\n    return (\n        <>\n        <MyDiagram\n            nodeDataArray={nodeDataArray}\n            linkDataArray={linkDataArray}\n            onNodeSelection={onNodeSelection}\n            onModelChange={onModelChange}\n            onTextChange={onTextChange}\n        />\n        \n        </>\n    );\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(MyDiagramContainer);\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\nimport { Reducer } from 'redux';\nimport * as go from 'gojs';\nimport {\n    init,\n    updateNodeColor,\n    addNode,\n    nodeSelected,\n    nodeDeselected,\n    removeNode,\n    removeLink,\n    UpdateNodeText,\n    UpdateNodeTextEvent\n} from '../actions/diagram';\n\nexport interface DiagramState {\n    nodeDataArray: Array<NodeModel>;\n    linkDataArray: Array<go.ObjectData>;\n    selectedNodeKeys: string[];\n}\n\nexport interface NodeModel extends go.ObjectData {\n    label: string;\n    color: string;\n}\n\nconst initHandler = (\n    state: DiagramState,\n    payload: { nodeDataArray: Array<NodeModel>; linkDataArray: Array<go.ObjectData> }\n): DiagramState => {\n    return {\n        ...state,\n        nodeDataArray: payload.nodeDataArray,\n        linkDataArray: payload.linkDataArray\n    };\n};\n\nconst colors = ['lightblue', 'orange', 'lightgreen', 'pink', 'yellow', 'red', 'grey', 'magenta', 'cyan'];\n\nconst getRandomColor = () => {\n    return colors[Math.floor(Math.random() * colors.length)];\n};\n\nconst updateNodeColorHandler = (state: DiagramState): DiagramState => {\n    const updatedNodes = state.nodeDataArray.map(node => {\n        return {\n            ...node,\n            color: getRandomColor()\n        };\n    });\n\n    return {\n        ...state,\n        nodeDataArray: updatedNodes\n    };\n};\n\nconst updateNodeTextHandler = (state: DiagramState, payload: UpdateNodeTextEvent): DiagramState => {\n    const nodeIndex = state.nodeDataArray.findIndex(node => node.key === payload.key);\n\n    return {\n        ...state,\n        nodeDataArray: [\n            ...state.nodeDataArray.slice(0, nodeIndex),\n            {\n                ...state.nodeDataArray[nodeIndex],\n                label: payload.text\n            },\n            ...state.nodeDataArray.slice(nodeIndex + 1)\n        ]\n    };\n};\n\nconst addNodeHandler = (state: DiagramState, payload: string): DiagramState => {\n    const linksToAdd: go.ObjectData[] = state.selectedNodeKeys.map(parent => {\n        return { from: parent, to: payload };\n    });\n    return {\n        ...state,\n        nodeDataArray: [...state.nodeDataArray, { key: payload, label: payload, color: getRandomColor() }],\n        linkDataArray: linksToAdd.length > 0 ? [...state.linkDataArray].concat(linksToAdd) : [...state.linkDataArray]\n    };\n};\n\nconst removeNodeHandler = (state: DiagramState, payload: go.Key): DiagramState => {\n    const nodeToRemoveIndex = state.nodeDataArray.findIndex(node => node.key === payload);\n    if (nodeToRemoveIndex === -1) {\n        return state;\n    }\n    return {\n        ...state,\n        nodeDataArray: [\n            ...state.nodeDataArray.slice(0, nodeToRemoveIndex),\n            ...state.nodeDataArray.slice(nodeToRemoveIndex + 1)\n        ]\n    };\n};\n\nconst removeLinkHandler = (state: DiagramState, payload: go.Key): DiagramState => {\n    const linkToRemoveIndex = state.linkDataArray.findIndex(link => link.Key === payload);\n    if (linkToRemoveIndex === -1) {\n        return state;\n    }\n    return {\n        ...state,\n        linkDataArray: [\n            ...state.linkDataArray.slice(0, linkToRemoveIndex),\n            ...state.linkDataArray.slice(linkToRemoveIndex + 1)\n        ]\n    };\n};\n\nconst nodeSelectedHandler = (state: DiagramState, payload: string): DiagramState => {\n    return {\n        ...state,\n        selectedNodeKeys: [...state.selectedNodeKeys, payload]\n    };\n};\n\nconst nodeDeselectedHandler = (state: DiagramState, payload: string): DiagramState => {\n    const nodeIndexToRemove = state.selectedNodeKeys.findIndex(key => key === payload);\n    if (nodeIndexToRemove === -1) {\n        return state;\n    }\n    return {\n        ...state,\n        selectedNodeKeys: [\n            ...state.selectedNodeKeys.slice(0, nodeIndexToRemove),\n            ...state.selectedNodeKeys.slice(nodeIndexToRemove + 1)\n        ]\n    };\n};\n\nexport const diagramReducer: Reducer<DiagramState> = reducerWithInitialState<DiagramState>({\n    nodeDataArray: [{ key: 'Root', color: 'lightblue', label: 'Root' }],\n    linkDataArray: [],\n    selectedNodeKeys: []\n})\n    .case(init, initHandler)\n    .case(updateNodeColor, updateNodeColorHandler)\n    .case(UpdateNodeText, updateNodeTextHandler)\n    .case(addNode, addNodeHandler)\n    .case(removeNode, removeNodeHandler)\n    .case(removeLink, removeLinkHandler)\n    .case(nodeSelected, nodeSelectedHandler)\n    .case(nodeDeselected, nodeDeselectedHandler)\n    .build();\n\nexport const nodeSelectionSelector = (state: DiagramState) => state.selectedNodeKeys;\n","import React from 'react';\nimport { DiagramState, nodeSelectionSelector } from '../reducers/diagramReducer';\nimport { connect } from 'react-redux';\n\ninterface SelectionDetailsStateProps {\n    nodes: string[];\n}\n\nconst mapStateToProps = (state: DiagramState): SelectionDetailsStateProps => {\n    return {\n        nodes: nodeSelectionSelector(state)\n    };\n};\n\nconst SelectionDetails = ({ nodes }: SelectionDetailsStateProps) => {\n    const message = nodes.reduce((result: string, current: string) => result + ' ' + current, '');\n    return <div>{nodes.length === 0 ? 'No selection' : 'Selection: ' + message}</div>;\n};\n\nexport default connect(mapStateToProps)(SelectionDetails);\n","import React from 'react';\nimport './App.css';\nimport AppButtons from './components/AppButtons';\nimport MyDiagramContainer from './components/MyDiagramContainer';\nimport SelectionDetails from './components/SelectionDetails';\n\n// const logo = require('./logo.svg');\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                {/* <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <h1 className=\"App-title\">React + Redux + GoJS Example</h1>\n                </header> */}\n                <AppButtons />\n                <SelectionDetails />\n                <MyDiagramContainer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the 'N+1' visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL!,\n            window.location.toString()\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (!isLocalhost) {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            } else {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker) {\n                    installingWorker.onstatechange = () => {\n                        if (installingWorker.state === 'installed') {\n                            if (navigator.serviceWorker.controller) {\n                                // At this point, the old content will have been purged and\n                                // the fresh content will have been added to the cache.\n                                // It's the perfect time to display a 'New content is\n                                // available; please refresh.' message in your web app.\n                                console.log(\n                                    'New content is available; please refresh.'\n                                );\n                            } else {\n                                // At this point, everything has been precached.\n                                // It's the perfect time to display a\n                                // 'Content is cached for offline use.' message.\n                                console.log(\n                                    'Content is cached for offline use.'\n                                );\n                            }\n                        }\n                    };\n                }\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type')!.indexOf('javascript') ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { createStore, applyMiddleware, Middleware } from 'redux';\n\nexport const create = mainReducer => {\n    const middlewares: Array<Middleware> = [];\n\n    if (process.env.NODE_ENV !== `production`) {\n        const { logger } = require(`redux-logger`);\n        middlewares.push(logger);\n    }\n\n    const store = createStore(mainReducer, applyMiddleware(...middlewares));\n    return store;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { create } from './store';\nimport { diagramReducer } from './reducers/diagramReducer';\nimport go from 'gojs';\n\nconst gojsKey = process.env.REACT_APP_GOJS_KEY;\n\nif (gojsKey) {\n    // tslint:disable-next-line:no-any\n    (go as any).licenseKey = gojsKey;\n}\n\nReactDOM.render(\n    <Provider store={create(diagramReducer)}>\n        <App />\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\nregisterServiceWorker();\n"],"sourceRoot":""}